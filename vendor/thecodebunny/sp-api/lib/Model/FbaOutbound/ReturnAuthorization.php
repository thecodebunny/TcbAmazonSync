<?php
/**
 * ReturnAuthorization
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Thecodebunny\SpApi
 */

/**
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Thecodebunny\SpApi\Model\FbaOutbound;

use \ArrayAccess;
use \Thecodebunny\SpApi\ObjectSerializer;
use \Thecodebunny\SpApi\Model\ModelInterface;

/**
 * ReturnAuthorization Class Doc Comment
 *
 * @category Class
 * @description Return authorization information for items accepted for return.
 * @package  Thecodebunny\SpApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ReturnAuthorization implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReturnAuthorization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'return_authorization_id' => 'string',
        'fulfillment_center_id' => 'string',
        'return_to_address' => '\Thecodebunny\SpApi\Model\FbaOutbound\Address',
        'amazon_rma_id' => 'string',
        'rma_page_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'return_authorization_id' => null,
        'fulfillment_center_id' => null,
        'return_to_address' => null,
        'amazon_rma_id' => null,
        'rma_page_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'return_authorization_id' => 'returnAuthorizationId',
        'fulfillment_center_id' => 'fulfillmentCenterId',
        'return_to_address' => 'returnToAddress',
        'amazon_rma_id' => 'amazonRmaId',
        'rma_page_url' => 'rmaPageURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'return_authorization_id' => 'setReturnAuthorizationId',
        'fulfillment_center_id' => 'setFulfillmentCenterId',
        'return_to_address' => 'setReturnToAddress',
        'amazon_rma_id' => 'setAmazonRmaId',
        'rma_page_url' => 'setRmaPageUrl',
        'headers' => 'setHeaders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'return_authorization_id' => 'getReturnAuthorizationId',
        'fulfillment_center_id' => 'getFulfillmentCenterId',
        'return_to_address' => 'getReturnToAddress',
        'amazon_rma_id' => 'getAmazonRmaId',
        'rma_page_url' => 'getRmaPageUrl',
        'headers' => 'getHeaders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['return_authorization_id'] = $data['return_authorization_id'] ?? null;
        $this->container['fulfillment_center_id'] = $data['fulfillment_center_id'] ?? null;
        $this->container['return_to_address'] = $data['return_to_address'] ?? null;
        $this->container['amazon_rma_id'] = $data['amazon_rma_id'] ?? null;
        $this->container['rma_page_url'] = $data['rma_page_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['return_authorization_id'] === null) {
            $invalidProperties[] = "'return_authorization_id' can't be null";
        }
        if ($this->container['fulfillment_center_id'] === null) {
            $invalidProperties[] = "'fulfillment_center_id' can't be null";
        }
        if ($this->container['return_to_address'] === null) {
            $invalidProperties[] = "'return_to_address' can't be null";
        }
        if ($this->container['amazon_rma_id'] === null) {
            $invalidProperties[] = "'amazon_rma_id' can't be null";
        }
        if ($this->container['rma_page_url'] === null) {
            $invalidProperties[] = "'rma_page_url' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets headers, if this is a top-level response model
     *
     * @return array[string]|null
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers (only relevant to response models)
     *
     * @param array[string => string]|null $headers Associative array of response headers.
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }


    /**
     * Gets return_authorization_id
     *
     * @return string
     */
    public function getReturnAuthorizationId()
    {
        return $this->container['return_authorization_id'];
    }

    /**
     * Sets return_authorization_id
     *
     * @param string $return_authorization_id An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.
     *
     * @return self
     */
    public function setReturnAuthorizationId($return_authorization_id)
    {
        $this->container['return_authorization_id'] = $return_authorization_id;

        return $this;
    }

    /**
     * Gets fulfillment_center_id
     *
     * @return string
     */
    public function getFulfillmentCenterId()
    {
        return $this->container['fulfillment_center_id'];
    }

    /**
     * Sets fulfillment_center_id
     *
     * @param string $fulfillment_center_id An identifier for the Amazon fulfillment center that the return items should be sent to.
     *
     * @return self
     */
    public function setFulfillmentCenterId($fulfillment_center_id)
    {
        $this->container['fulfillment_center_id'] = $fulfillment_center_id;

        return $this;
    }

    /**
     * Gets return_to_address
     *
     * @return \Thecodebunny\SpApi\Model\FbaOutbound\Address
     */
    public function getReturnToAddress()
    {
        return $this->container['return_to_address'];
    }

    /**
     * Sets return_to_address
     *
     * @param \Thecodebunny\SpApi\Model\FbaOutbound\Address $return_to_address return_to_address
     *
     * @return self
     */
    public function setReturnToAddress($return_to_address)
    {
        $this->container['return_to_address'] = $return_to_address;

        return $this;
    }

    /**
     * Gets amazon_rma_id
     *
     * @return string
     */
    public function getAmazonRmaId()
    {
        return $this->container['amazon_rma_id'];
    }

    /**
     * Sets amazon_rma_id
     *
     * @param string $amazon_rma_id The return merchandise authorization (RMA) that Amazon needs to process the return.
     *
     * @return self
     */
    public function setAmazonRmaId($amazon_rma_id)
    {
        $this->container['amazon_rma_id'] = $amazon_rma_id;

        return $this;
    }

    /**
     * Gets rma_page_url
     *
     * @return string
     */
    public function getRmaPageUrl()
    {
        return $this->container['rma_page_url'];
    }

    /**
     * Sets rma_page_url
     *
     * @param string $rma_page_url A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.
     *
     * @return self
     */
    public function setRmaPageUrl($rma_page_url)
    {
        $this->container['rma_page_url'] = $rma_page_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


